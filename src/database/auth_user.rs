//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "auth_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub password: String,
    pub last_login: Option<DateTimeWithTimeZone>,
    pub is_superuser: bool,
    #[sea_orm(unique)]
    pub username: String,
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub is_staff: bool,
    pub is_active: bool,
    pub date_joined: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auth_user_groups::Entity")]
    AuthUserGroups,
    #[sea_orm(has_many = "super::auth_user_user_permissions::Entity")]
    AuthUserUserPermissions,
    #[sea_orm(has_many = "super::django_admin_log::Entity")]
    DjangoAdminLog,
}

impl Related<super::auth_user_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthUserGroups.def()
    }
}

impl Related<super::auth_user_user_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthUserUserPermissions.def()
    }
}

impl Related<super::django_admin_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DjangoAdminLog.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
